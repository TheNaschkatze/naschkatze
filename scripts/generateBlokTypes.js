import fs from "fs-extra";
import fetch from "node-fetch";

function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

const doNotModifyWarning =
    '/**\n' +
    ' * This file is automatically generated by the custom storyblok-types plugin. Do not modify it manually.\n' +
    ' */';

async function fetchStoryblokComponents () {
    try {
        const response = await fetch(`https://api.storyblok.com/v1/spaces/${process.env.STORYBLOK_SPACE_ID}/components`, {
            headers: {
                'Authorization': process.env.STORYBLOK_OAUTH_TOKEN,
            }
        });

        const json = await response.json();
        const components = json.components;

        return components;
    } catch (error) {
        console.error(error);
        return [];
    }
}

function convertType(field) {
    switch (field.type) {
        case 'text':
        case 'markdown':
        case 'richtext':
        case 'link':
            return 'string';
        case 'number':
            return 'number';
        case 'checkbox':
            return 'boolean';
        case 'bloks':
            return field.restrict_components && field.component_whitelist.length > 0
                ? capitalizeFirstLetter(field.component_whitelist[0])
                : '[]';
        default:
            return 'unknown';
    }
}

function convertComponentToInterface(component) {
    const capitalizedComponentName = capitalizeFirstLetter(component.name);
    let interfaceString = `export interface ${capitalizedComponentName} {\n`;

    // add fields to the interface
    for (const fieldName in component.schema) {
        const field = component.schema[fieldName];
        const fieldType = convertType(field);
        interfaceString += `  ${fieldName}${field.required ? '' : '?'}: ${fieldType};\n`;
    }

    interfaceString += '}\n\n';
    return interfaceString;
}

export default async function generateTypes() {
    const components = await fetchStoryblokComponents();
    let interfacesString = `${doNotModifyWarning}\n\n`;

    for (const component of components) {
        interfacesString += convertComponentToInterface(component);
    }

    await fs.writeFile(
        'types/storyblok-components.ts',
        interfacesString,
        { encoding: 'utf8' },
        err => {
            if (err) throw err;
            console.log('File has been saved!');
        }
    );
}
