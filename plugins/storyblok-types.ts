import fs from 'fs-extra'
import StoryblokClient from 'storyblok-js-client'
interface StoryblokComponent {
    name: string;
    schema: {
        [key: string]: StoryblokField;
    };
}

interface StoryblokField {
    type: string;
    required: boolean;
    restrict_components: boolean;
    component_whitelist: string[];
}

function capitalizeFirstLetter (str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1)
}

const doNotModifyWarning = '/**\n' +
    ' * This file is automatically generated by the custom storyblok-types plugin. Do not modify it manually.\n' +
    ' */'

export default defineNuxtPlugin(async () => {

    const Storyblok = new StoryblokClient({
      oauthToken: process.env.STORYBLOK_OAUTH_TOKEN
    })

    async function fetchStoryblokComponents () {
      try {
        const response = await Storyblok.get(`spaces/${process.env.STORYBLOK_SPACE_ID}/components/`)
        const components: StoryblokComponent[] = response.data.components

        return components
      } catch (error) {
        console.error('Error fetching Storyblok components:', error)
        return []
      }
    }

    function convertType (field: StoryblokField): string {
      switch (field.type) {
        case 'text':
        case 'markdown':
        case 'richtext':
        case 'link':
          return 'string'
        case 'number':
          return 'number'
        case 'checkbox':
          return 'boolean'
        case 'bloks':
          return field.restrict_components && field.component_whitelist.length > 0
            ? capitalizeFirstLetter(field.component_whitelist[0])
            : '[]'
        default:
          return 'unknown'
      }
    }

    function convertComponentToInterface (component: StoryblokComponent): string {
      const capitalizedComponentName = capitalizeFirstLetter(component.name)

      let interfaceString = `export interface ${capitalizedComponentName} {\n`

        // add fields to the interface
      for (const fieldName in component.schema) {
        const field = component.schema[fieldName]
        const fieldType = convertType(field)

        interfaceString += `  ${fieldName}${field.required ? '' : '?'}: ${fieldType};\n`
      }

      interfaceString += '}\n\n'
      return interfaceString
    }

    const components = await fetchStoryblokComponents()

    let interfacesString = `${doNotModifyWarning}\n\n`

    for (const component of components) {
      interfacesString += convertComponentToInterface(component)
    }

    fs.writeFileSync('types/storyblok-components.ts', interfacesString)
})
